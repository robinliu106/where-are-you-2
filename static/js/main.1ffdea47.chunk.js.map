{"version":3,"sources":["components/GamePage/gameSlice.js","utils/methods.js","utils/cityList.js","components/GamePage/StreetViewMap.js","components/GamePage/MiniMap.js","components/GamePage/Spinner.js","components/GamePage/index.js","App.js","reportWebVitals.js","store.js","index.js"],"names":["gameSlice","createSlice","name","initialState","score","stage","activeRound","cityCoords","markerCoords","reducers","updateScore","state","action","payload","updateCity","updateMarker","updateStage","setActiveRound","actions","selectScore","game","selectStage","selectCity","selectMarker","generateRandomPoint","center","radius","x0","lng","y0","lat","rd","u","Math","random","v","w","sqrt","t","PI","x","cos","y","sin","xp","parseFloat","toFixed","calculateDistance","lat1","lng1","lat2","lng2","deg2rad","deg","square","pow","lat_dif","lng_dif","a","asin","shuffleArray","array","i","length","j","floor","temp","pickRandomCity","isNaN","value","n","Number","cityList","country","city","bigContainerStyle","height","width","StreetViewMap","useSelector","className","googleMapsApiKey","process","REACT_APP_GOOGLE_MAPS_API_KEY","mapContainerStyle","zoom","initialCenter","position","visible","options","disableDefaultUI","enableCloseButton","onVisibleChanged","console","log","smallContainerStyle","MiniMap","polyLineCoords","currentPlace","actualDistance","useState","mapRef","setMapRef","mapCenter","setMapCenter","dispatch","useDispatch","handleMarkerCoords","e","latLng","toJSON","onLoad","map","onDragEnd","getCenter","onClick","draggable","path","override","css","Spinner","loading","color","size","Geocode","setApiKey","GamePage","setCurrentPlace","setPolyLineCoords","setActualDistance","showSubmitButton","setShowSubmitButton","nextCityCache","setNextCityCache","isLoading","setIsLoading","useEffect","pickNewCity","getNewCity","currentCity","newCity","randomPoint","retry","bail","utils","fromAddress","res","results","geometry","location","fetch","streetViewFetch","json","streetViewResponse","status","retries","calculateScore","distance","finalScore","Stage","class","Score","Object","values","disabled","id","App","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","gameReducer","ReactDOM","render","forceRefresh","store","document","getElementById"],"mappings":"kiBAEaA,EAAYC,YAAY,CACjCC,KAAM,OACNC,aAAc,CACVC,MAAO,EACPC,MAAO,EACPC,aAAa,EACbC,WAAY,GACZC,aAAc,IAElBC,SAAU,CACNC,YAAa,SAACC,EAAOC,GACjBD,EAAMP,OAASQ,EAAOC,SAE1BC,WAAY,SAACH,EAAOC,GAChBD,EAAMJ,WAAaK,EAAOC,SAE9BE,aAAc,SAACJ,EAAOC,GAClBD,EAAMH,aAAeI,EAAOC,SAEhCG,YAAa,SAACL,GACVA,EAAMN,OAAS,GAEnBY,eAAgB,SAACN,EAAOC,GACpBD,EAAML,YAAcM,EAAOC,Y,EAK+Cb,EAAUkB,QAAjFR,E,EAAAA,YAAaI,E,EAAAA,WAAYC,E,EAAAA,aAAcC,E,EAAAA,YAezCG,G,EAfsDF,eAexC,SAACN,GAAD,OAAWA,EAAMS,KAAKhB,QACpCiB,EAAc,SAACV,GAAD,OAAWA,EAAMS,KAAKf,OACpCiB,EAAa,SAACX,GAAD,OAAWA,EAAMS,KAAKb,YACnCgB,EAAe,SAACZ,GAAD,OAAWA,EAAMS,KAAKZ,cAGnCR,IAAf,Q,OCnDawB,EAAsB,SAACC,EAAQC,GACxC,IAAIC,EAAKF,EAAOG,IACZC,EAAKJ,EAAOK,IAEZC,EAAKL,EAAS,OAEdM,EAAIC,KAAKC,SACTC,EAAIF,KAAKC,SAETE,EAAIL,EAAKE,KAAKI,KAAKL,GACnBM,EAAI,EAAIL,KAAKM,GAAKJ,EAClBK,EAAIJ,EAAIH,KAAKQ,IAAIH,GACjBI,EAAIN,EAAIH,KAAKU,IAAIL,GAEjBM,EAAKJ,EAAIP,KAAKQ,IAAIZ,GAGtB,MAAO,CACHC,IAAKe,YAAYH,EAAIb,GAAIiB,QAAQ,IACjClB,IAAKiB,YAAYD,EAAKjB,GAAImB,QAAQ,MAG7BC,EAAoB,SAACC,EAAMC,EAAMC,EAAMC,GAChD,SAASC,EAAQC,GACb,OAAOA,GAAOpB,KAAKM,GAAK,KAE5B,SAASe,EAAOd,GACZ,OAAOP,KAAKsB,IAAIf,EAAG,GAGvBQ,EAAOI,EAAQJ,GAEf,IAAMQ,GADNN,EAAOE,EAAQF,IACQF,EACjBS,EAAUL,EAAQD,EAAOF,GACzBS,EAAIJ,EAAOrB,KAAKU,IAAIa,EAAU,IAAMvB,KAAKQ,IAAIO,GAAQf,KAAKQ,IAAIS,GAAQI,EAAOrB,KAAKU,IAAIc,EAAU,IAGtG,OADgB,SADR,MAAQxB,KAAK0B,KAAK1B,KAAKI,KAAKqB,MAEvBZ,QAAQ,IAGZc,EAAe,SAACC,GACzB,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACvC,IAAME,EAAI/B,KAAKgC,MAAMhC,KAAKC,SAAW4B,GAC/BI,EAAOL,EAAMC,GACnBD,EAAMC,GAAKD,EAAMG,GACjBH,EAAMG,GAAKE,EAEf,OAAOL,GAGEM,EAAiB,SAACN,GAC3B,OAAOA,EAAM5B,KAAKgC,MAAMhC,KAAKC,SAAW2B,EAAME,UAGrCK,EAAQ,SAACC,GAClB,IAAMC,EAAIC,OAAOF,GACjB,OAAOC,IAAMA,GCk4BFE,EA17BA,CACX,CACIC,QAAS,cACTC,KAAM,SAEV,CACID,QAAS,UACTC,KAAM,UAEV,CACID,QAAS,UACTC,KAAM,SAEV,CACID,QAAS,iBACTC,KAAM,YAEV,CACID,QAAS,UACTC,KAAM,oBAEV,CACID,QAAS,SACTC,KAAM,UAEV,CACID,QAAS,WACTC,KAAM,cAGV,CACID,QAAS,sBACTC,KAAM,gBAEV,CACID,QAAS,YACTC,KAAM,gBAEV,CACID,QAAS,UACTC,KAAM,WAEV,CACID,QAAS,QACTC,KAAM,cAEV,CACID,QAAS,YACTC,KAAM,YAEV,CACID,QAAS,UACTC,KAAM,QAEV,CACID,QAAS,aACTC,KAAM,QAEV,CACID,QAAS,UACTC,KAAM,UAEV,CACID,QAAS,UACTC,KAAM,aAEV,CACID,QAAS,aACTC,KAAM,SAEV,CACID,QAAS,WACTC,KAAM,cAEV,CACID,QAAS,UACTC,KAAM,SAEV,CACID,QAAS,UACTC,KAAM,uBAEV,CACID,QAAS,SACTC,KAAM,YAEV,CACID,QAAS,QACTC,KAAM,cAEV,CACID,QAAS,UACTC,KAAM,YAEV,CACID,QAAS,SACTC,KAAM,WAEV,CACID,QAAS,UACTC,KAAM,UAEV,CACID,QAAS,yBACTC,KAAM,YAEV,CACID,QAAS,WACTC,KAAM,YAGV,CACID,QAAS,SACTC,KAAM,eAGV,CACID,QAAS,SACTC,KAAM,uBAEV,CACID,QAAS,WACTC,KAAM,SAEV,CACID,QAAS,eACTC,KAAM,eAEV,CACID,QAAS,UACTC,KAAM,aAEV,CACID,QAAS,WACTC,KAAM,cAEV,CACID,QAAS,WACTC,KAAM,UAEV,CACID,QAAS,SACTC,KAAM,UAEV,CACID,QAAS,aACTC,KAAM,SAEV,CACID,QAAS,iBACTC,KAAM,eAEV,CACID,QAAS,2BACTC,KAAM,UAEV,CACID,QAAS,OACTC,KAAM,UAEV,CACID,QAAS,QACTC,KAAM,qBAEV,CACID,QAAS,QACTC,KAAM,UAEV,CACID,QAAS,mBACTC,KAAM,oBAEV,CACID,QAAS,0BACTC,KAAM,eAEV,CACID,QAAS,WACTC,KAAM,UAEV,CACID,QAAS,UACTC,KAAM,UAEV,CACID,QAAS,QACTC,KAAM,eAEV,CACID,QAAS,eACTC,KAAM,UAEV,CACID,QAAS,aACTC,KAAM,WAEV,CACID,QAAS,UACTC,KAAM,UAEV,CACID,QAAS,OACTC,KAAM,aAEV,CACID,QAAS,SACTC,KAAM,WAEV,CACID,QAAS,iBACTC,KAAM,SAEV,CACID,QAAS,UACTC,KAAM,cAEV,CACID,QAAS,WACTC,KAAM,YAEV,CACID,QAAS,WACTC,KAAM,UAEV,CACID,QAAS,qBACTC,KAAM,yBAEV,CACID,QAAS,aACTC,KAAM,QAEV,CACID,QAAS,UACTC,KAAM,SAEV,CACID,QAAS,QACTC,KAAM,SAEV,CACID,QAAS,cACTC,KAAM,gBAEV,CACID,QAAS,UACTC,KAAM,UAEV,CACID,QAAS,oBACTC,KAAM,UAEV,CACID,QAAS,UACTC,KAAM,UAEV,CACID,QAAS,UACTC,KAAM,WAEV,CACID,QAAS,WACTC,KAAM,eAEV,CACID,QAAS,mBACTC,KAAM,WAEV,CACID,QAAS,gBACTC,KAAM,eAEV,CACID,QAAS,eACTC,KAAM,QAEV,CACID,QAAS,UACTC,KAAM,0BAEV,CACID,QAAS,SACTC,KAAM,SAEV,CACID,QAAS,gBACTC,KAAM,WAEV,CACID,QAAS,mBACTC,KAAM,WAEV,CACID,QAAS,QACTC,KAAM,cAEV,CACID,QAAS,SACTC,KAAM,UAEV,CACID,QAAS,UACTC,KAAM,WAEV,CACID,QAAS,UACTC,KAAM,UAEV,CACID,QAAS,QACTC,KAAM,SAEV,CACID,QAAS,YACTC,KAAM,aAEV,CACID,QAAS,SACTC,KAAM,WAEV,CACID,QAAS,YACTC,KAAM,QAEV,CACID,QAAS,UACTC,KAAM,kBAEV,CACID,QAAS,aACTC,KAAM,eAEV,CACID,QAAS,OACTC,KAAM,OAEV,CACID,QAAS,YACTC,KAAM,uBAEV,CACID,QAAS,SACTC,KAAM,WAEV,CACID,QAAS,gBACTC,KAAM,UAEV,CACID,QAAS,SACTC,KAAM,cAEV,CACID,QAAS,QACTC,KAAM,kBAGV,CACID,QAAS,gCACTC,KAAM,QAEV,CACID,QAAS,WACTC,KAAM,eAEV,CACID,QAAS,YACTC,KAAM,YAEV,CACID,QAAS,UACTC,KAAM,YAEV,CACID,QAAS,UACTC,KAAM,WAEV,CACID,QAAS,QACTC,KAAM,aAEV,CACID,QAAS,YACTC,KAAM,WAEV,CACID,QAAS,OACTC,KAAM,UAEV,CACID,QAAS,OACTC,KAAM,WAEV,CACID,QAAS,UACTC,KAAM,UAEV,CACID,QAAS,SACTC,KAAM,aAEV,CACID,QAAS,QACTC,KAAM,QAEV,CACID,QAAS,cACTC,KAAM,gBAEV,CACID,QAAS,UACTC,KAAM,YAEV,CACID,QAAS,QACTC,KAAM,SAEV,CACID,QAAS,SACTC,KAAM,SAEV,CACID,QAAS,aACTC,KAAM,UAEV,CACID,QAAS,QACTC,KAAM,WAEV,CACID,QAAS,WACTC,KAAM,WAEV,CACID,QAAS,SACTC,KAAM,UAEV,CACID,QAAS,aACTC,KAAM,WAEV,CACID,QAAS,OACTC,KAAM,aAEV,CACID,QAAS,SACTC,KAAM,QAEV,CACID,QAAS,UACTC,KAAM,UAEV,CACID,QAAS,UACTC,KAAM,UAEV,CACID,QAAS,UACTC,KAAM,YAEV,CACID,QAAS,yBACTC,KAAM,WAEV,CACID,QAAS,gBACTC,KAAM,SAEV,CACID,QAAS,YACTC,KAAM,WAEV,CACID,QAAS,aACTC,KAAM,2BAEV,CACID,QAAS,QACTC,KAAM,SAEV,CACID,QAAS,kBACTC,KAAM,UAEV,CACID,QAAS,aACTC,KAAM,gBAEV,CACID,QAAS,SACTC,KAAM,YAEV,CACID,QAAS,WACTC,KAAM,gBAEV,CACID,QAAS,WACTC,KAAM,QAEV,CACID,QAAS,OACTC,KAAM,UAEV,CACID,QAAS,QACTC,KAAM,YAEV,CACID,QAAS,mBACTC,KAAM,sBAEV,CACID,QAAS,aACTC,KAAM,kBAEV,CACID,QAAS,aACTC,KAAM,cAEV,CACID,QAAS,YACTC,KAAM,cAEV,CACID,QAAS,UACTC,KAAM,aAEV,CACID,QAAS,SACTC,KAAM,eAEV,CACID,QAAS,kCACTC,KAAM,WAEV,CACID,QAAS,UACTC,KAAM,YAEV,CACID,QAAS,SACTC,KAAM,gBAEV,CACID,QAAS,WACTC,KAAM,cAEV,CACID,QAAS,aACTC,KAAM,aAEV,CACID,QAAS,aACTC,KAAM,YAEV,CACID,QAAS,UACTC,KAAM,SAEV,CACID,QAAS,aACTC,KAAM,UAEV,CACID,QAAS,UACTC,KAAM,oBAEV,CACID,QAAS,UACTC,KAAM,YAEV,CACID,QAAS,QACTC,KAAM,SAEV,CACID,QAAS,QACTC,KAAM,aAEV,CACID,QAAS,cACTC,KAAM,aAEV,CACID,QAAS,uBACTC,KAAM,cAEV,CACID,QAAS,gBACTC,KAAM,QAEV,CACID,QAAS,cACTC,KAAM,cAEV,CACID,QAAS,YACTC,KAAM,WAEV,CACID,QAAS,QACTC,KAAM,UAEV,CACID,QAAS,UACTC,KAAM,SAEV,CACID,QAAS,OACTC,KAAM,SAEV,CACID,QAAS,iBACTC,KAAM,YAEV,CACID,QAAS,cACTC,KAAM,aAEV,CACID,QAAS,mBACTC,KAAM,WAEV,CACID,QAAS,2BACTC,KAAM,WAEV,CACID,QAAS,SACTC,KAAM,QAEV,CACID,QAAS,OACTC,KAAM,UAEV,CACID,QAAS,WACTC,KAAM,aAEV,CACID,QAAS,QACTC,KAAM,SAEV,CACID,QAAS,YACTC,KAAM,QAEV,CACID,QAAS,SACTC,KAAM,mBAEV,CACID,QAAS,mBACTC,KAAM,gBAEV,CACID,QAAS,WACTC,KAAM,UAEV,CACID,QAAS,OACTC,KAAM,QAEV,CACID,QAAS,cACTC,KAAM,UAEV,CACID,QAAS,WACTC,KAAM,aAEV,CACID,QAAS,SACTC,KAAM,YAEV,CACID,QAAS,WACTC,KAAM,UAEV,CACID,QAAS,cACTC,KAAM,YAEV,CACID,QAAS,QACTC,KAAM,QAEV,CACID,QAAS,UACTC,KAAM,eAEV,CACID,QAAS,UACTC,KAAM,aAEV,CACID,QAAS,qBACTC,KAAM,UAEV,CACID,QAAS,SACTC,KAAM,UAEV,CACID,QAAS,eACTC,KAAM,aAEV,CACID,QAAS,wBACTC,KAAM,cAEV,CACID,QAAS,cACTC,KAAM,YAEV,CACID,QAAS,4BACTC,KAAM,gBAEV,CACID,QAAS,mCACTC,KAAM,aAEV,CACID,QAAS,QACTC,KAAM,QAEV,CACID,QAAS,aACTC,KAAM,cAEV,CACID,QAAS,wBACTC,KAAM,KAEV,CACID,QAAS,eACTC,KAAM,UAEV,CACID,QAAS,WACTC,KAAM,aAEV,CACID,QAAS,UACTC,KAAM,SAEV,CACID,QAAS,SACTC,KAAM,YAEV,CACID,QAAS,aACTC,KAAM,YAEV,CACID,QAAS,eACTC,KAAM,YAEV,CACID,QAAS,YACTC,KAAM,aAEV,CACID,QAAS,WACTC,KAAM,cAEV,CACID,QAAS,WACTC,KAAM,aAEV,CACID,QAAS,kBACTC,KAAM,WAEV,CACID,QAAS,UACTC,KAAM,aAEV,CACID,QAAS,eACTC,KAAM,YAGV,CACID,QAAS,cACTC,KAAM,SAEV,CACID,QAAS,cACTC,KAAM,QAEV,CACID,QAAS,QACTC,KAAM,UAGV,CACID,QAAS,QACTC,KAAM,WAEV,CACID,QAAS,WACTC,KAAM,cAEV,CACID,QAAS,yBACTC,KAAM,gBAEV,CACID,QAAS,YACTC,KAAM,WAEV,CACID,QAAS,SACTC,KAAM,aAEV,CACID,QAAS,cACTC,KAAM,QAEV,CACID,QAAS,QACTC,KAAM,YAEV,CACID,QAAS,aACTC,KAAM,YAEV,CACID,QAAS,WACTC,KAAM,UAEV,CACID,QAAS,WACTC,KAAM,WAEV,CACID,QAAS,mCACTC,KAAM,YAEV,CACID,QAAS,OACTC,KAAM,WAEV,CACID,QAAS,UACTC,KAAM,WAEV,CACID,QAAS,QACTC,KAAM,cAEV,CACID,QAAS,sBACTC,KAAM,iBAEV,CACID,QAAS,UACTC,KAAM,SAEV,CACID,QAAS,SACTC,KAAM,UAEV,CACID,QAAS,eACTC,KAAM,YAEV,CACID,QAAS,2BACTC,KAAM,iBAEV,CACID,QAAS,SACTC,KAAM,YAEV,CACID,QAAS,SACTC,KAAM,WAEV,CACID,QAAS,UACTC,KAAM,QAEV,CACID,QAAS,uBACTC,KAAM,aAEV,CACID,QAAS,iBACTC,KAAM,UAEV,CACID,QAAS,gBACTC,KAAM,cAGV,CACID,QAAS,UACTC,KAAM,cAEV,CACID,QAAS,aACTC,KAAM,WAEV,CACID,QAAS,UACTC,KAAM,aAEV,CACID,QAAS,YACTC,KAAM,WAEV,CACID,QAAS,UACTC,KAAM,SAEV,CACID,QAAS,0BACTC,KAAM,aAEV,CACID,QAAS,uBACTC,KAAM,oBAEV,CACID,QAAS,QACTC,KAAM,WAEV,CACID,QAAS,oBACTC,KAAM,YAEV,CACID,QAAS,iBACTC,KAAM,UAEV,CACID,QAAS,QACTC,KAAM,SAEV,CACID,QAAS,SACTC,KAAM,UAEV,CACID,QAAS,WACTC,KAAM,W,QCj7BRC,EAAoB,CACtBC,OAAQ,QACRC,MAAO,QAgCIC,EA7BO,WAClB,IAAMvE,EAAawE,YAAY/E,GAE/B,OACI,qBAAKgF,UAAU,kBAAf,SACI,cAAC,IAAD,CAAYC,iBAAkBC,mJAAYC,8BAA1C,SACI,cAAC,IAAD,CACIC,kBAAmBT,EACnBU,KAAM,EACNC,cAAe,CACXxD,IAAK,WACLF,KAAM,YALd,SAQI,cAAC,IAAD,CACI2D,SAAUhF,EACViF,SAAS,EA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","file":"static/js/main.1ffdea47.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const gameSlice = createSlice({\n    name: \"game\",\n    initialState: {\n        score: 0,\n        stage: 1,\n        activeRound: true,\n        cityCoords: {},\n        markerCoords: {},\n    },\n    reducers: {\n        updateScore: (state, action) => {\n            state.score += action.payload;\n        },\n        updateCity: (state, action) => {\n            state.cityCoords = action.payload;\n        },\n        updateMarker: (state, action) => {\n            state.markerCoords = action.payload;\n        },\n        updateStage: (state) => {\n            state.stage += 1;\n        },\n        setActiveRound: (state, action) => {\n            state.activeRound = action.payload;\n        },\n    },\n});\n\nexport const { updateScore, updateCity, updateMarker, updateStage, setActiveRound } = gameSlice.actions;\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched\n// export const incrementAsync = (amount) => (dispatch) => {\n//     setTimeout(() => {\n//         dispatch(incrementByAmount(amount));\n//     }, 1000);\n// };\n\n// The function below is called a selector and allows us to select a score from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.score)`\nexport const selectScore = (state) => state.game.score;\nexport const selectStage = (state) => state.game.stage;\nexport const selectCity = (state) => state.game.cityCoords;\nexport const selectMarker = (state) => state.game.markerCoords;\nexport const selectActiveRound = (state) => state.game.activeRound;\n\nexport default gameSlice.reducer;\n","export const generateRandomPoint = (center, radius) => {\n    var x0 = center.lng;\n    var y0 = center.lat;\n    // Convert Radius from meters to degrees.\n    var rd = radius / 111300;\n\n    var u = Math.random();\n    var v = Math.random();\n\n    var w = rd * Math.sqrt(u);\n    var t = 2 * Math.PI * v;\n    var x = w * Math.cos(t);\n    var y = w * Math.sin(t);\n\n    var xp = x / Math.cos(y0);\n\n    // Resulting point.\n    return {\n        lat: parseFloat((y + y0).toFixed(6)),\n        lng: parseFloat((xp + x0).toFixed(6)),\n    };\n};\nexport const calculateDistance = (lat1, lng1, lat2, lng2) => {\n    function deg2rad(deg) {\n        return deg * (Math.PI / 180);\n    }\n    function square(x) {\n        return Math.pow(x, 2);\n    }\n    const r = 6371; // radius of the earth in km\n    lat1 = deg2rad(lat1);\n    lat2 = deg2rad(lat2);\n    const lat_dif = lat2 - lat1;\n    const lng_dif = deg2rad(lng2 - lng1);\n    const a = square(Math.sin(lat_dif / 2)) + Math.cos(lat1) * Math.cos(lat2) * square(Math.sin(lng_dif / 2));\n    let d = 2 * r * Math.asin(Math.sqrt(a));\n    let miles = d * 0.621371;\n    return miles.toFixed(2);\n};\n\nexport const shuffleArray = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * i);\n        const temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n    return array;\n};\n\nexport const pickRandomCity = (array) => {\n    return array[Math.floor(Math.random() * array.length)];\n};\n\nexport const isNaN = (value) => {\n    const n = Number(value);\n    return n !== n;\n};\n","let cityList = [\n    {\n        country: \"Afghanistan\",\n        city: \"Kabul\",\n    },\n    {\n        country: \"Albania\",\n        city: \"Tirana\",\n    },\n    {\n        country: \"Algeria\",\n        city: \"Alger\",\n    },\n    {\n        country: \"American Samoa\",\n        city: \"Fagatogo\",\n    },\n    {\n        country: \"Andorra\",\n        city: \"Andorra la Vella\",\n    },\n    {\n        country: \"Angola\",\n        city: \"Luanda\",\n    },\n    {\n        country: \"Anguilla\",\n        city: \"The Valley\",\n    },\n\n    {\n        country: \"Antigua and Barbuda\",\n        city: \"Saint John's\",\n    },\n    {\n        country: \"Argentina\",\n        city: \"Buenos Aires\",\n    },\n    {\n        country: \"Armenia\",\n        city: \"Yerevan\",\n    },\n    {\n        country: \"Aruba\",\n        city: \"Oranjestad\",\n    },\n    {\n        country: \"Australia\",\n        city: \"Canberra\",\n    },\n    {\n        country: \"Austria\",\n        city: \"Wien\",\n    },\n    {\n        country: \"Azerbaijan\",\n        city: \"Baku\",\n    },\n    {\n        country: \"Bahamas\",\n        city: \"Nassau\",\n    },\n    {\n        country: \"Bahrain\",\n        city: \"al-Manama\",\n    },\n    {\n        country: \"Bangladesh\",\n        city: \"Dhaka\",\n    },\n    {\n        country: \"Barbados\",\n        city: \"Bridgetown\",\n    },\n    {\n        country: \"Belarus\",\n        city: \"Minsk\",\n    },\n    {\n        country: \"Belgium\",\n        city: \"Bruxelles [Brussel]\",\n    },\n    {\n        country: \"Belize\",\n        city: \"Belmopan\",\n    },\n    {\n        country: \"Benin\",\n        city: \"Porto-Novo\",\n    },\n    {\n        country: \"Bermuda\",\n        city: \"Hamilton\",\n    },\n    {\n        country: \"Bhutan\",\n        city: \"Thimphu\",\n    },\n    {\n        country: \"Bolivia\",\n        city: \"La Paz\",\n    },\n    {\n        country: \"Bosnia and Herzegovina\",\n        city: \"Sarajevo\",\n    },\n    {\n        country: \"Botswana\",\n        city: \"Gaborone\",\n    },\n\n    {\n        country: \"Brazil\",\n        city: \"Brasília\",\n    },\n\n    {\n        country: \"Brunei\",\n        city: \"Bandar Seri Begawan\",\n    },\n    {\n        country: \"Bulgaria\",\n        city: \"Sofia\",\n    },\n    {\n        country: \"Burkina Faso\",\n        city: \"Ouagadougou\",\n    },\n    {\n        country: \"Burundi\",\n        city: \"Bujumbura\",\n    },\n    {\n        country: \"Cambodia\",\n        city: \"Phnom Penh\",\n    },\n    {\n        country: \"Cameroon\",\n        city: \"Yaound\",\n    },\n    {\n        country: \"Canada\",\n        city: \"Ottawa\",\n    },\n    {\n        country: \"Cape Verde\",\n        city: \"Praia\",\n    },\n    {\n        country: \"Cayman Islands\",\n        city: \"George Town\",\n    },\n    {\n        country: \"Central African Republic\",\n        city: \"Bangui\",\n    },\n    {\n        country: \"Chad\",\n        city: \"N'Djam\",\n    },\n    {\n        country: \"Chile\",\n        city: \"Santiago de Chile\",\n    },\n    {\n        country: \"China\",\n        city: \"Peking\",\n    },\n    {\n        country: \"Christmas Island\",\n        city: \"Flying Fish Cove\",\n    },\n    {\n        country: \"Cocos (Keeling) Islands\",\n        city: \"West Island\",\n    },\n    {\n        country: \"Colombia\",\n        city: \"Santaf\",\n    },\n    {\n        country: \"Comoros\",\n        city: \"Moroni\",\n    },\n    {\n        country: \"Congo\",\n        city: \"Brazzaville\",\n    },\n    {\n        country: \"Cook Islands\",\n        city: \"Avarua\",\n    },\n    {\n        country: \"Costa Rica\",\n        city: \"San Jos\",\n    },\n    {\n        country: \"Croatia\",\n        city: \"Zagreb\",\n    },\n    {\n        country: \"Cuba\",\n        city: \"La Habana\",\n    },\n    {\n        country: \"Cyprus\",\n        city: \"Nicosia\",\n    },\n    {\n        country: \"Czech Republic\",\n        city: \"Praha\",\n    },\n    {\n        country: \"Denmark\",\n        city: \"Copenhagen\",\n    },\n    {\n        country: \"Djibouti\",\n        city: \"Djibouti\",\n    },\n    {\n        country: \"Dominica\",\n        city: \"Roseau\",\n    },\n    {\n        country: \"Dominican Republic\",\n        city: \"Santo Domingo de Guzm\",\n    },\n    {\n        country: \"East Timor\",\n        city: \"Dili\",\n    },\n    {\n        country: \"Ecuador\",\n        city: \"Quito\",\n    },\n    {\n        country: \"Egypt\",\n        city: \"Cairo\",\n    },\n    {\n        country: \"El Salvador\",\n        city: \"San Salvador\",\n    },\n    {\n        country: \"England\",\n        city: \"London\",\n    },\n    {\n        country: \"Equatorial Guinea\",\n        city: \"Malabo\",\n    },\n    {\n        country: \"Eritrea\",\n        city: \"Asmara\",\n    },\n    {\n        country: \"Estonia\",\n        city: \"Tallinn\",\n    },\n    {\n        country: \"Ethiopia\",\n        city: \"Addis Abeba\",\n    },\n    {\n        country: \"Falkland Islands\",\n        city: \"Stanley\",\n    },\n    {\n        country: \"Faroe Islands\",\n        city: \"Tórshavn\",\n    },\n    {\n        country: \"Fiji Islands\",\n        city: \"Suva\",\n    },\n    {\n        country: \"Finland\",\n        city: \"Helsinki [Helsingfors]\",\n    },\n    {\n        country: \"France\",\n        city: \"Paris\",\n    },\n    {\n        country: \"French Guiana\",\n        city: \"Cayenne\",\n    },\n    {\n        country: \"French Polynesia\",\n        city: \"Papeete\",\n    },\n    {\n        country: \"Gabon\",\n        city: \"Libreville\",\n    },\n    {\n        country: \"Gambia\",\n        city: \"Banjul\",\n    },\n    {\n        country: \"Georgia\",\n        city: \"Tbilisi\",\n    },\n    {\n        country: \"Germany\",\n        city: \"Berlin\",\n    },\n    {\n        country: \"Ghana\",\n        city: \"Accra\",\n    },\n    {\n        country: \"Gibraltar\",\n        city: \"Gibraltar\",\n    },\n    {\n        country: \"Greece\",\n        city: \"Athenai\",\n    },\n    {\n        country: \"Greenland\",\n        city: \"Nuuk\",\n    },\n    {\n        country: \"Grenada\",\n        city: \"Saint George's\",\n    },\n    {\n        country: \"Guadeloupe\",\n        city: \"Basse-Terre\",\n    },\n    {\n        country: \"Guam\",\n        city: \"Aga\",\n    },\n    {\n        country: \"Guatemala\",\n        city: \"Ciudad de Guatemala\",\n    },\n    {\n        country: \"Guinea\",\n        city: \"Conakry\",\n    },\n    {\n        country: \"Guinea-Bissau\",\n        city: \"Bissau\",\n    },\n    {\n        country: \"Guyana\",\n        city: \"Georgetown\",\n    },\n    {\n        country: \"Haiti\",\n        city: \"Port-au-Prince\",\n    },\n\n    {\n        country: \"Holy See (Vatican City State)\",\n        city: \"Citt\",\n    },\n    {\n        country: \"Honduras\",\n        city: \"Tegucigalpa\",\n    },\n    {\n        country: \"Hong Kong\",\n        city: \"Victoria\",\n    },\n    {\n        country: \"Hungary\",\n        city: \"Budapest\",\n    },\n    {\n        country: \"Iceland\",\n        city: \"Reykjav\",\n    },\n    {\n        country: \"India\",\n        city: \"New Delhi\",\n    },\n    {\n        country: \"Indonesia\",\n        city: \"Jakarta\",\n    },\n    {\n        country: \"Iran\",\n        city: \"Tehran\",\n    },\n    {\n        country: \"Iraq\",\n        city: \"Baghdad\",\n    },\n    {\n        country: \"Ireland\",\n        city: \"Dublin\",\n    },\n    {\n        country: \"Israel\",\n        city: \"Jerusalem\",\n    },\n    {\n        country: \"Italy\",\n        city: \"Roma\",\n    },\n    {\n        country: \"Ivory Coast\",\n        city: \"Yamoussoukro\",\n    },\n    {\n        country: \"Jamaica\",\n        city: \"Kingston\",\n    },\n    {\n        country: \"Japan\",\n        city: \"Tokyo\",\n    },\n    {\n        country: \"Jordan\",\n        city: \"Amman\",\n    },\n    {\n        country: \"Kazakhstan\",\n        city: \"Astana\",\n    },\n    {\n        country: \"Kenya\",\n        city: \"Nairobi\",\n    },\n    {\n        country: \"Kiribati\",\n        city: \"Bairiki\",\n    },\n    {\n        country: \"Kuwait\",\n        city: \"Kuwait\",\n    },\n    {\n        country: \"Kyrgyzstan\",\n        city: \"Bishkek\",\n    },\n    {\n        country: \"Laos\",\n        city: \"Vientiane\",\n    },\n    {\n        country: \"Latvia\",\n        city: \"Riga\",\n    },\n    {\n        country: \"Lebanon\",\n        city: \"Beirut\",\n    },\n    {\n        country: \"Lesotho\",\n        city: \"Maseru\",\n    },\n    {\n        country: \"Liberia\",\n        city: \"Monrovia\",\n    },\n    {\n        country: \"Libyan Arab Jamahiriya\",\n        city: \"Tripoli\",\n    },\n    {\n        country: \"Liechtenstein\",\n        city: \"Vaduz\",\n    },\n    {\n        country: \"Lithuania\",\n        city: \"Vilnius\",\n    },\n    {\n        country: \"Luxembourg\",\n        city: \"Luxembourg [Luxemburg/L\",\n    },\n    {\n        country: \"Macao\",\n        city: \"Macao\",\n    },\n    {\n        country: \"North Macedonia\",\n        city: \"Skopje\",\n    },\n    {\n        country: \"Madagascar\",\n        city: \"Antananarivo\",\n    },\n    {\n        country: \"Malawi\",\n        city: \"Lilongwe\",\n    },\n    {\n        country: \"Malaysia\",\n        city: \"Kuala Lumpur\",\n    },\n    {\n        country: \"Maldives\",\n        city: \"Male\",\n    },\n    {\n        country: \"Mali\",\n        city: \"Bamako\",\n    },\n    {\n        country: \"Malta\",\n        city: \"Valletta\",\n    },\n    {\n        country: \"Marshall Islands\",\n        city: \"Dalap-Uliga-Darrit\",\n    },\n    {\n        country: \"Martinique\",\n        city: \"Fort-de-France\",\n    },\n    {\n        country: \"Mauritania\",\n        city: \"Nouakchott\",\n    },\n    {\n        country: \"Mauritius\",\n        city: \"Port-Louis\",\n    },\n    {\n        country: \"Mayotte\",\n        city: \"Mamoutzou\",\n    },\n    {\n        country: \"Mexico\",\n        city: \"Ciudad de M\",\n    },\n    {\n        country: \"Micronesia, Federated States of\",\n        city: \"Palikir\",\n    },\n    {\n        country: \"Moldova\",\n        city: \"Chisinau\",\n    },\n    {\n        country: \"Monaco\",\n        city: \"Monaco-Ville\",\n    },\n    {\n        country: \"Mongolia\",\n        city: \"Ulan Bator\",\n    },\n    {\n        country: \"Montenegro\",\n        city: \"Podgorica\",\n    },\n    {\n        country: \"Montserrat\",\n        city: \"Plymouth\",\n    },\n    {\n        country: \"Morocco\",\n        city: \"Rabat\",\n    },\n    {\n        country: \"Mozambique\",\n        city: \"Maputo\",\n    },\n    {\n        country: \"Myanmar\",\n        city: \"Rangoon (Yangon)\",\n    },\n    {\n        country: \"Namibia\",\n        city: \"Windhoek\",\n    },\n    {\n        country: \"Nauru\",\n        city: \"Yaren\",\n    },\n    {\n        country: \"Nepal\",\n        city: \"Kathmandu\",\n    },\n    {\n        country: \"Netherlands\",\n        city: \"Amsterdam\",\n    },\n    {\n        country: \"Netherlands Antilles\",\n        city: \"Willemstad\",\n    },\n    {\n        country: \"New Caledonia\",\n        city: \"Noum\",\n    },\n    {\n        country: \"New Zealand\",\n        city: \"Wellington\",\n    },\n    {\n        country: \"Nicaragua\",\n        city: \"Managua\",\n    },\n    {\n        country: \"Niger\",\n        city: \"Niamey\",\n    },\n    {\n        country: \"Nigeria\",\n        city: \"Abuja\",\n    },\n    {\n        country: \"Niue\",\n        city: \"Alofi\",\n    },\n    {\n        country: \"Norfolk Island\",\n        city: \"Kingston\",\n    },\n    {\n        country: \"North Korea\",\n        city: \"Pyongyang\",\n    },\n    {\n        country: \"Northern Ireland\",\n        city: \"Belfast\",\n    },\n    {\n        country: \"Northern Mariana Islands\",\n        city: \"Garapan\",\n    },\n    {\n        country: \"Norway\",\n        city: \"Oslo\",\n    },\n    {\n        country: \"Oman\",\n        city: \"Masqat\",\n    },\n    {\n        country: \"Pakistan\",\n        city: \"Islamabad\",\n    },\n    {\n        country: \"Palau\",\n        city: \"Koror\",\n    },\n    {\n        country: \"Palestine\",\n        city: \"Gaza\",\n    },\n    {\n        country: \"Panama\",\n        city: \"Ciudad de Panam\",\n    },\n    {\n        country: \"Papua New Guinea\",\n        city: \"Port Moresby\",\n    },\n    {\n        country: \"Paraguay\",\n        city: \"Asunci\",\n    },\n    {\n        country: \"Peru\",\n        city: \"Lima\",\n    },\n    {\n        country: \"Philippines\",\n        city: \"Manila\",\n    },\n    {\n        country: \"Pitcairn\",\n        city: \"Adamstown\",\n    },\n    {\n        country: \"Poland\",\n        city: \"Warszawa\",\n    },\n    {\n        country: \"Portugal\",\n        city: \"Lisboa\",\n    },\n    {\n        country: \"Puerto Rico\",\n        city: \"San Juan\",\n    },\n    {\n        country: \"Qatar\",\n        city: \"Doha\",\n    },\n    {\n        country: \"Reunion\",\n        city: \"Saint-Denis\",\n    },\n    {\n        country: \"Romania\",\n        city: \"Bucuresti\",\n    },\n    {\n        country: \"Russian Federation\",\n        city: \"Moscow\",\n    },\n    {\n        country: \"Rwanda\",\n        city: \"Kigali\",\n    },\n    {\n        country: \"Saint Helena\",\n        city: \"Jamestown\",\n    },\n    {\n        country: \"Saint Kitts and Nevis\",\n        city: \"Basseterre\",\n    },\n    {\n        country: \"Saint Lucia\",\n        city: \"Castries\",\n    },\n    {\n        country: \"Saint Pierre and Miquelon\",\n        city: \"Saint-Pierre\",\n    },\n    {\n        country: \"Saint Vincent and the Grenadines\",\n        city: \"Kingstown\",\n    },\n    {\n        country: \"Samoa\",\n        city: \"Apia\",\n    },\n    {\n        country: \"San Marino\",\n        city: \"San Marino\",\n    },\n    {\n        country: \"Sao Tome and Principe\",\n        city: \"S\",\n    },\n    {\n        country: \"Saudi Arabia\",\n        city: \"Riyadh\",\n    },\n    {\n        country: \"Scotland\",\n        city: \"Edinburgh\",\n    },\n    {\n        country: \"Senegal\",\n        city: \"Dakar\",\n    },\n    {\n        country: \"Serbia\",\n        city: \"Belgrade\",\n    },\n    {\n        country: \"Seychelles\",\n        city: \"Victoria\",\n    },\n    {\n        country: \"Sierra Leone\",\n        city: \"Freetown\",\n    },\n    {\n        country: \"Singapore\",\n        city: \"Singapore\",\n    },\n    {\n        country: \"Slovakia\",\n        city: \"Bratislava\",\n    },\n    {\n        country: \"Slovenia\",\n        city: \"Ljubljana\",\n    },\n    {\n        country: \"Solomon Islands\",\n        city: \"Honiara\",\n    },\n    {\n        country: \"Somalia\",\n        city: \"Mogadishu\",\n    },\n    {\n        country: \"South Africa\",\n        city: \"Pretoria\",\n    },\n\n    {\n        country: \"South Korea\",\n        city: \"Seoul\",\n    },\n    {\n        country: \"South Sudan\",\n        city: \"Juba\",\n    },\n    {\n        country: \"Spain\",\n        city: \"Madrid\",\n    },\n\n    {\n        country: \"Sudan\",\n        city: \"Khartum\",\n    },\n    {\n        country: \"Suriname\",\n        city: \"Paramaribo\",\n    },\n    {\n        country: \"Svalbard and Jan Mayen\",\n        city: \"Longyearbyen\",\n    },\n    {\n        country: \"Swaziland\",\n        city: \"Mbabane\",\n    },\n    {\n        country: \"Sweden\",\n        city: \"Stockholm\",\n    },\n    {\n        country: \"Switzerland\",\n        city: \"Bern\",\n    },\n    {\n        country: \"Syria\",\n        city: \"Damascus\",\n    },\n    {\n        country: \"Tajikistan\",\n        city: \"Dushanbe\",\n    },\n    {\n        country: \"Tanzania\",\n        city: \"Dodoma\",\n    },\n    {\n        country: \"Thailand\",\n        city: \"Bangkok\",\n    },\n    {\n        country: \"The Democratic Republic of Congo\",\n        city: \"Kinshasa\",\n    },\n    {\n        country: \"Togo\",\n        city: \"Lomé\",\n    },\n    {\n        country: \"Tokelau\",\n        city: \"Fakaofo\",\n    },\n    {\n        country: \"Tonga\",\n        city: \"Nuku'alofa\",\n    },\n    {\n        country: \"Trinidad and Tobago\",\n        city: \"Port-of-Spain\",\n    },\n    {\n        country: \"Tunisia\",\n        city: \"Tunis\",\n    },\n    {\n        country: \"Turkey\",\n        city: \"Ankara\",\n    },\n    {\n        country: \"Turkmenistan\",\n        city: \"Ashgabat\",\n    },\n    {\n        country: \"Turks and Caicos Islands\",\n        city: \"Cockburn Town\",\n    },\n    {\n        country: \"Tuvalu\",\n        city: \"Funafuti\",\n    },\n    {\n        country: \"Uganda\",\n        city: \"Kampala\",\n    },\n    {\n        country: \"Ukraine\",\n        city: \"Kyiv\",\n    },\n    {\n        country: \"United Arab Emirates\",\n        city: \"Abu Dhabi\",\n    },\n    {\n        country: \"United Kingdom\",\n        city: \"London\",\n    },\n    {\n        country: \"United States\",\n        city: \"Washington\",\n    },\n\n    {\n        country: \"Uruguay\",\n        city: \"Montevideo\",\n    },\n    {\n        country: \"Uzbekistan\",\n        city: \"Toskent\",\n    },\n    {\n        country: \"Vanuatu\",\n        city: \"Port-Vila\",\n    },\n    {\n        country: \"Venezuela\",\n        city: \"Caracas\",\n    },\n    {\n        country: \"Vietnam\",\n        city: \"Hanoi\",\n    },\n    {\n        country: \"Virgin Islands, British\",\n        city: \"Road Town\",\n    },\n    {\n        country: \"Virgin Islands, U.S.\",\n        city: \"Charlotte Amalie\",\n    },\n    {\n        country: \"Wales\",\n        city: \"Cardiff\",\n    },\n    {\n        country: \"Wallis and Futuna\",\n        city: \"Mata-Utu\",\n    },\n    {\n        country: \"Western Sahara\",\n        city: \"El-Aai\",\n    },\n    {\n        country: \"Yemen\",\n        city: \"Sanaa\",\n    },\n    {\n        country: \"Zambia\",\n        city: \"Lusaka\",\n    },\n    {\n        country: \"Zimbabwe\",\n        city: \"Harare\",\n    },\n];\n\nexport default cityList;\n","import React, { useEffect, useState } from \"react\";\nimport { StreetViewPanorama, GoogleMap, LoadScript } from \"@react-google-maps/api\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport * as gameSlice from \"./gameSlice\";\n\nconst bigContainerStyle = {\n    height: \"100vh\",\n    width: \"70vw\",\n};\n\nconst StreetViewMap = () => {\n    const cityCoords = useSelector(gameSlice.selectCity);\n\n    return (\n        <div className=\"street-view-map\">\n            <LoadScript googleMapsApiKey={process.env.REACT_APP_GOOGLE_MAPS_API_KEY}>\n                <GoogleMap\n                    mapContainerStyle={bigContainerStyle}\n                    zoom={7}\n                    initialCenter={{\n                        lat: 42.3517071,\n                        lng: -71.0691937,\n                    }}\n                >\n                    <StreetViewPanorama\n                        position={cityCoords}\n                        visible={true}\n                        options={{\n                            disableDefaultUI: true,\n                            enableCloseButton: false,\n                        }}\n                        onVisibleChanged={() => console.log(\"visible changed\")}\n                    />\n                </GoogleMap>\n            </LoadScript>\n        </div>\n    );\n};\n\nexport default StreetViewMap;\n","import React, { useState, useEffect } from \"react\";\n\nimport { GoogleMap, InfoWindow, LoadScript, Marker, Polyline } from \"@react-google-maps/api\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport * as gameSlice from \"./gameSlice\";\n\nconst smallContainerStyle = {\n    height: \"50vh\",\n    width: \"30vw\",\n};\n\nconst MiniMap = ({ polyLineCoords, currentPlace, actualDistance }) => {\n    //LOCAL STATE\n    const [mapRef, setMapRef] = useState(null);\n    const [mapCenter, setMapCenter] = useState({\n        lat: 42.3517071,\n        lng: -71.0691937,\n    });\n\n    //REDUX\n    const cityCoords = useSelector(gameSlice.selectCity);\n    const markerCoords = useSelector(gameSlice.selectMarker);\n    const dispatch = useDispatch();\n\n    const handleMarkerCoords = (e) => {\n        const { lat, lng } = e.latLng.toJSON();\n        // setMarkerCoords({ lat, lng });\n        dispatch(gameSlice.updateMarker({ lat, lng }));\n    };\n\n    return (\n        <div>\n            <LoadScript googleMapsApiKey={process.env.REACT_APP_GOOGLE_MAPS_API_KEY}>\n                <GoogleMap\n                    onLoad={(map) => setMapRef(map)}\n                    mapContainerStyle={smallContainerStyle}\n                    zoom={1}\n                    center={mapCenter}\n                    onDragEnd={() => {\n                        if (mapRef) {\n                            let { lat, lng } = mapRef.getCenter().toJSON();\n                            setMapCenter({ lat, lng });\n                        }\n                    }}\n                    onClick={(e) => handleMarkerCoords(e)}\n                >\n                    {markerCoords ? (\n                        <Marker draggable={true} position={markerCoords} onDragEnd={(e) => handleMarkerCoords(e)} />\n                    ) : null}\n\n                    {polyLineCoords ? <Polyline path={polyLineCoords} /> : null}\n\n                    {polyLineCoords ? (\n                        <InfoWindow position={cityCoords}>\n                            <div>{`Distance to: ${currentPlace.city}, ${currentPlace.country} is ${actualDistance} miles`}</div>\n                        </InfoWindow>\n                    ) : null}\n                </GoogleMap>\n            </LoadScript>\n        </div>\n    );\n};\n\nexport default MiniMap;\n","import { useState } from \"react\";\nimport { css } from \"@emotion/react\";\nimport BarLoader from \"react-spinners/BarLoader\";\n\n// Can be a string as well. Need to ensure each key-value pair ends with ;\nconst override = css`\n    display: block;\n    margin: 0 auto;\n    border-color: red;\n`;\n\nconst Spinner = ({ loading }) => {\n    let color = \"#ffffff\";\n\n    return (\n        <div className=\"sweet-loading\">\n            <BarLoader color={color} loading={true} css={override} size={150} />\n        </div>\n    );\n};\n\nexport default Spinner;\n","import \"../../styles/app.css\";\nimport React, { useState, useEffect } from \"react\";\nimport Geocode from \"react-geocode\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport retry from \"async-retry\";\nimport * as nodeutil from \"util\";\nimport Timer from \"./Timer\";\n\n//Local methods and data\nimport * as utils from \"../../utils/methods\";\nimport * as gameSlice from \"./gameSlice\";\nimport cityList from \"../../utils/cityList\";\nimport StreetViewMap from \"./StreetViewMap\";\nimport MiniMap from \"./MiniMap\";\nimport Spinner from \"./Spinner\";\nGeocode.setApiKey(process.env.REACT_APP_GOOGLE_MAPS_API_KEY);\n//TODO add cors anywhere\nconst GamePage = () => {\n    const score = useSelector(gameSlice.selectScore);\n    const stage = useSelector(gameSlice.selectStage);\n\n    const cityCoords = useSelector(gameSlice.selectCity);\n    const markerCoords = useSelector(gameSlice.selectMarker);\n    // const activeRound = useSelector(gameSlice.selectActiveRound);\n\n    const dispatch = useDispatch();\n\n    const [currentPlace, setCurrentPlace] = useState();\n    const [polyLineCoords, setPolyLineCoords] = useState();\n    const [actualDistance, setActualDistance] = useState();\n    const [showSubmitButton, setShowSubmitButton] = useState(true);\n    const [nextCityCache, setNextCityCache] = useState();\n    const [isLoading, setIsLoading] = useState();\n\n    useEffect(() => {\n        pickNewCity();\n    }, []);\n\n    const pickNewCity = async () => {\n        setIsLoading(true);\n        //if city exists in cache, dispatch from cache\n        if (nextCityCache) {\n            dispatch(gameSlice.updateCity(nextCityCache));\n            console.log(\"next city cache exists, using\", nextCityCache);\n        } else {\n            //else get new city\n            const currentCity = await getNewCity();\n            await dispatch(gameSlice.updateCity(currentCity));\n        }\n\n        //load next city in cache\n        const newCity = await getNewCity();\n        await setNextCityCache(newCity);\n        setIsLoading(false);\n        console.log(\"next city is set\", newCity);\n    };\n\n    const getNewCity = async () => {\n        let randomPoint = null;\n        console.log(\"-------------------------\");\n        try {\n            await retry(\n                async (bail) => {\n                    // if anything throws, we retry\\\n                    let { country, city } = utils.pickRandomCity(cityList);\n                    setCurrentPlace({ country, city });\n                    console.log(\"current place\", city, country);\n                    const res = await Geocode.fromAddress(`${city}, ${country}`);\n                    console.log(\"res\", res);\n                    const { lat, lng } = await res.results[0].geometry.location;\n                    // console.log(\"lat lng\", lat, lng);\n\n                    randomPoint = utils.generateRandomPoint({ lat, lng }, 100);\n                    console.log(\"randomPoint\", randomPoint);\n\n                    //check that street view exists\n                    let streetViewFetch = await fetch(\n                        `https://maps.googleapis.com/maps/api/streetview/metadata?key=${process.env.REACT_APP_GOOGLE_MAPS_API_KEY}&location=${randomPoint.lat},${randomPoint.lng}&return_error_codes=true&radius=100&source=outdoor`\n                    );\n                    let streetViewResponse = await streetViewFetch.json();\n\n                    if (streetViewResponse.status !== \"OK\") {\n                        throw \"error\";\n                    }\n                    console.log(\"streetViewResponse\", streetViewResponse);\n                },\n                {\n                    retries: 20,\n                }\n            );\n        } catch (error) {\n            console.log(\"pick new city error:\", error);\n        }\n\n        return randomPoint;\n        // dispatch(gameSlice.updateCity(randomPoint));\n    };\n\n    const handleSubmitButton = () => {\n        if (!markerCoords) {\n            console.log(\"marker was not placed, zero points\");\n            return;\n        }\n\n        setPolyLineCoords([cityCoords, markerCoords]);\n\n        const distance = utils.calculateDistance(...Object.values(cityCoords), ...Object.values(markerCoords));\n\n        if (distance && !utils.isNaN(distance)) {\n            console.log(\"actual distance\", distance);\n\n            setActualDistance(distance);\n            calculateScore(distance);\n        }\n        setShowSubmitButton(false);\n    };\n\n    const handleNextButton = () => {\n        dispatch(gameSlice.updateMarker(null));\n        setPolyLineCoords(null);\n        setActualDistance(null);\n        setShowSubmitButton(true);\n\n        pickNewCity();\n        dispatch(gameSlice.updateStage());\n    };\n\n    const calculateScore = (distance) => {\n        let finalScore = 0;\n\n        if (distance < 10) {\n            finalScore += 1000;\n        } else if (distance < 50) {\n            finalScore += 500;\n        } else if (distance < 200) {\n            finalScore += 400;\n        } else if (distance < 1000) {\n            finalScore += 300;\n        } else if (distance < 5000) {\n            finalScore += 200;\n        } else if (distance < 10000) {\n            finalScore += 100;\n        }\n\n        dispatch(gameSlice.updateScore(finalScore));\n    };\n\n    const Stage = () => {\n        return <p class=\"lead\">{`Stage ${stage}`}</p>;\n    };\n\n    const Score = () => {\n        return <p class=\"lead\">{`Score: ${score}`}</p>;\n    };\n\n    return (\n        <div className=\"container\">\n            <StreetViewMap />\n\n            <div className=\"info-section\">\n                <div className=\"info-section__top\">\n                    <h1 className=\"display-2\">Where are you?</h1>\n\n                    <div className=\"info-box\">\n                        <Stage />\n\n                        <Score />\n                    </div>\n\n                    <MiniMap\n                        polyLineCoords={polyLineCoords}\n                        currentPlace={currentPlace}\n                        actualDistance={actualDistance}\n                    />\n                </div>\n\n                <div className=\"info-section__bottom\">\n                    <button\n                        className=\"btn btn-outline-primary\"\n                        onClick={handleSubmitButton}\n                        disabled={!showSubmitButton}\n                    >\n                        Submit\n                    </button>\n\n                    <button className=\"btn btn-outline-success\" id=\"next_button\" onClick={handleNextButton}>\n                        {isLoading ? \"Loading\" : \"Next City\"}\n                        {isLoading ? <Spinner loading={true} /> : null}\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default GamePage;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Redirect, Switch } from \"react-router-dom\";\n// import LandingPage from \"./components/LandingPage\";\nimport GamePage from \"./components/GamePage\";\n\nconst App = () => {\n    return (\n        <div>\n            <Switch>\n                <Route path=\"/game\" component={GamePage} />\n            </Switch>\n        </div>\n    );\n};\n\nexport default App;\n// <Route path=\"/\" component={LandingPage} exact />\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport gameReducer from \"./components/GamePage/gameSlice\";\n\nexport default configureStore({\n    reducer: {\n        game: gameReducer,\n    },\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\nReactDOM.render(\n    <BrowserRouter forceRefresh={true}>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}